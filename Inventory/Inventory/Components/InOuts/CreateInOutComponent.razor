@using Entities
@using Business

<div class="form-group">
    <label>Bodegas:</label>
    <select class="form-control" @onchange="OnWarehouseChanged">
        <option>Seleccione una bodega...</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }
    </select>
</div>

<hr />

<EditForm Model="inout">
    <div class="form-group">
        <label>Producto</label>
        <InputSelect class="form-control" @bind-Value="inout.StorageId">
            <option>Seleccione un producto...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Cantidad</label>
        <InputNumber class="form-control" @bind-Value="inout.Quantity" />
    </div>
    <div class="form-group">
        <label>Es un ingreso</label>
        <InputCheckbox @bind-Value="inout.IsInput" />
    </div>
    <div>
        <input type="button" value="@buttonValue" @onclick="Save" class="btn btn-warning" />
    </div>
</EditForm>

<hr />

<div class="h3 text-center">
    @message
</div>

@code{
    InputOutputEntity inout = new InputOutputEntity();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();
    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();
    string buttonValue => inout.IsInput ? "Registrar Entrada" : "Registrar Salida";
    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WherehouseList();
    }

    private void OnWarehouseChanged(ChangeEventArgs e)
    {
        string idWarehouse = e.Value.ToString();
        storages = B_Storage.StorageListByWarehouse(idWarehouse);
    }

    private void Save()
    {
        var quantity = inout.Quantity;
        var oStorage = storages.LastOrDefault(s => s.StorageId == inout.StorageId);
        var product = oStorage.Product;

        if (!inout.IsInput)
        {
            //quantity = -1 * quantity;
            if (IsBiggerThanZero(quantity, oStorage))
            {
                product.TotalQuantity = product.TotalQuantity - quantity;
                oStorage.PartialQuantity = oStorage.PartialQuantity - quantity;

                B_Storage.UpdateStorage(oStorage);
                B_Product.UpdateProduct(product);
                message = $"El producto {oProduct.ProductName} ha sido actualizado.";
            }
            else
            {
                message = $"No existe la cantidad suficiente en bodega para el producto {oProduct.ProductName}.";
            }
        }
        else
        {
            product.TotalQuantity = product.TotalQuantity + quantity;
            oStorage.PartialQuantity = oStorage.PartialQuantity + quantity;

            B_Storage.UpdateStorage(oStorage);
            B_Product.UpdateProduct(product);

            message = $"El producto {oProduct.ProductName} ha sido actualizado.";
        }
    }

    private bool IsBiggerThanZero(int quantity, StorageEntity storage)
    {
        if (quantity < 0 && storage.PartialQuantity < quantity)
        {
            return false;
        }
        return true;
    }
}